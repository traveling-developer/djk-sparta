---
import SectionHeader from "./SectionHeader.astro";

import approachImage from "../assets/approach.webp";

interface Props {
    latitude: number;
    longitude: number;
    zoom: number;
    title: string;
    hasInfoWindow: boolean;
    displayInfoWindowOnClick: boolean;
    infoWindowContent?: string;
    infoWindowHeader?: string;
    headerDisabled?: boolean;
}

const {
    latitude,
    longitude,
    zoom,
    title,
    hasInfoWindow = false,
    displayInfoWindowOnClick = true,
    infoWindowContent,
    infoWindowHeader,
    headerDisabled = true,
} = Astro.props;

const apiKey = import.meta.env.GOOGLE_MAPS_API;
---

<div>
    <SectionHeader title="Anfahrt" imageMetadata={approachImage} />
    <div
        id="map"
        class="h-96 mb-10 mt-5 mx-5 2xl:mx-52 xl:mx-32 lg:mx-12 drop-shadow-xl border-solid border-4"
    >
        <div
            id="fallback"
            class="h-full flex flex-col items-center justify-center text-center px-5"
        >
            Google Maps konnte nicht geladen werden. Bitte akzeptiere die
            Cookies, um Google Maps anzuzeigen.

            <button
                class="btn bg-spartaRed text-white hover:bg-spartaGray mt-5"
                type="button"
                data-cc="show-preferencesModal"
                >Cookie-Einstellungen Ã¶ffnen</button
            >
        </div>
    </div>

    <script
        is:inline
        type="text/plain"
        data-category="functionality"
        data-service="Google Maps"
        define:vars={{
            latitude,
            longitude,
            zoom,
            title,
            hasInfoWindow,
            displayInfoWindowOnClick,
            infoWindowContent,
            infoWindowHeader,
            headerDisabled,
            apiKey,
        }}
    >
        ((g) => {
            var h,
                a,
                k,
                p = "The Google Maps JavaScript API",
                c = "google",
                l = "importLibrary",
                q = "__ib__",
                m = document,
                b = window;
            b = b[c] || (b[c] = {});
            var d = b.maps || (b.maps = {}),
                r = new Set(),
                e = new URLSearchParams(),
                u = () =>
                    h ||
                    (h = new Promise(async (f, n) => {
                        await (a = m.createElement("script"));
                        e.set("libraries", [...r] + "");
                        for (k in g)
                            e.set(
                                k.replace(
                                    /[A-Z]/g,
                                    (t) => "_" + t[0].toLowerCase(),
                                ),
                                g[k],
                            );
                        e.set("callback", c + ".maps." + q);
                        a.src = `https://maps.${c}apis.com/maps/api/js?` + e;
                        d[q] = f;
                        a.onerror = () =>
                            (h = n(Error(p + " could not load.")));
                        a.nonce = m.querySelector("script[nonce]")?.nonce || "";
                        m.head.append(a);
                    }));
            d[l]
                ? console.warn(p + " only loads once. Ignoring:", g)
                : (d[l] = (f, ...n) =>
                      r.add(f) && u().then(() => d[l](f, ...n)));
        })({
            key: apiKey,
            v: "weekly",
        });
        let map;

        async function initMap() {
            const fallbackElement = document.getElementById("fallback");
            fallbackElement.remove();

            const position = {
                lat: latitude,
                lng: longitude,
            };

            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement } =
                await google.maps.importLibrary("marker");

            map = new Map(document.getElementById("map"), {
                zoom: zoom,
                center: position,
                mapId: "customMap",
            });

            const marker = new AdvancedMarkerElement({
                map: map,
                position: position,
                title: title,
            });

            if (hasInfoWindow) {
                const infowindow = new google.maps.InfoWindow({
                    content: infoWindowContent,
                    headerContent: infoWindowHeader,
                    headerDisabled: headerDisabled,
                    ariaLabel: "Label",
                });
                if (displayInfoWindowOnClick) {
                    marker.addListener("click", () => {
                        infowindow.open({
                            anchor: marker,
                            map,
                        });
                    });
                } else {
                    infowindow.open({
                        anchor: marker,
                        map,
                    });
                }
            }
        }

        initMap();
    </script>
</div>
